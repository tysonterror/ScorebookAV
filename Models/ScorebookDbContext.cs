// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ScorebookAV.Models;

public partial class ScorebookDbContext : DbContext
{
    public ScorebookDbContext(DbContextOptions<ScorebookDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Class> Classes { get; set; }

    public virtual DbSet<ClassEvaluation> ClassEvaluations { get; set; }

    public virtual DbSet<ClassStudent> ClassStudents { get; set; }

    public virtual DbSet<ClassStudentEvaluation> ClassStudentEvaluations { get; set; }

    public virtual DbSet<CurriculumObjective> CurriculumObjectives { get; set; }

    public virtual DbSet<PEvaluationType> PEvaluationTypes { get; set; }

    public virtual DbSet<PEvaluationTypeParam> PEvaluationTypeParams { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Class>(entity =>
        {
            entity.ToTable("Class");

            entity.Property(e => e.Description).HasColumnType("TEXT (50)");
        });

        modelBuilder.Entity<ClassEvaluation>(entity =>
        {
            entity.ToTable("ClassEvaluation");

            entity.HasOne(d => d.Class).WithMany(p => p.ClassEvaluations).HasForeignKey(d => d.ClassId);

            entity.HasOne(d => d.EvaluationType).WithMany(p => p.ClassEvaluations)
                .HasForeignKey(d => d.EvaluationTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<ClassStudent>(entity =>
        {
            entity.ToTable("ClassStudent");

            entity.HasOne(d => d.Class).WithMany(p => p.ClassStudents)
                .HasForeignKey(d => d.ClassId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Student).WithMany(p => p.ClassStudents).HasForeignKey(d => d.StudentId);
        });

        modelBuilder.Entity<ClassStudentEvaluation>(entity =>
        {
            entity.ToTable("ClassStudentEvaluation");

            entity.Property(e => e.Remarks).HasColumnType("TEXT (350)");

            entity.HasOne(d => d.ClassEvaluation).WithMany(p => p.ClassStudentEvaluations).HasForeignKey(d => d.ClassEvaluationId);

            entity.HasOne(d => d.EvaluationType).WithMany(p => p.ClassStudentEvaluations).HasForeignKey(d => d.EvaluationTypeId);

            entity.HasOne(d => d.Student).WithMany(p => p.ClassStudentEvaluations).HasForeignKey(d => d.StudentId);
        });

        modelBuilder.Entity<CurriculumObjective>(entity =>
        {
            entity.Property(e => e.Description).HasColumnType("TEXT (500)");
        });

        modelBuilder.Entity<PEvaluationType>(entity =>
        {
            entity.HasKey(e => e.EvaluationTypeId);

            entity.ToTable("P_EvaluationType");

            entity.Property(e => e.EvaluationTypeId).ValueGeneratedNever();
            entity.Property(e => e.Description).HasColumnType("TEXT (50)");
        });

        modelBuilder.Entity<PEvaluationTypeParam>(entity =>
        {
            entity.HasKey(e => e.EvaluationTypeParamId);

            entity.ToTable("P_EvaluationTypeParam");

            entity.Property(e => e.Description).HasColumnType("TEXT (50)");

            entity.HasOne(d => d.EvaluationType).WithMany(p => p.PEvaluationTypeParams)
                .HasForeignKey(d => d.EvaluationTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.ToTable("Student");

            entity.Property(e => e.StudentId).ValueGeneratedNever();
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasColumnType("TEXT (50)");
            entity.Property(e => e.LastName).HasColumnType("TEXT (50)");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}